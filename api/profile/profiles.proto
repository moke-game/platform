syntax = "proto3";

// ProfileService is the service for profile
// 玩家基本信息服务, 用于读取/更新玩家基本信息
package profile.v1;

import "google/api/annotations.proto";
option go_package = "profile/api;pb";

// ProfileService is the service for profile
// 玩家基本信息服务
service ProfileService {
  //IsProfileExist check if profile exist
  // 当前玩家是否存在
  rpc IsProfileExist(IsProfileExistRequest) returns (IsProfileExistResponse) {
    option (google.api.http) = {
      post: "/v1/profile/is_exist"
      body: "*"
    };
  }
  // GetProfile get profile by uid
  // 获取玩家基本信息
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {
    option (google.api.http) = {
      post: "/v1/profile/get"
      body: "*"
    };
  }
  // CreateProfile create profile
  // 创建玩家基本信息
  rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse) {
    option (google.api.http) = {
      post: "/v1/profile/create"
      body: "*"
    };
  }
  // UpdateProfile update profile
  // 更新玩家基本信息
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {
    option (google.api.http) = {
      post: "/v1/profile/update"
      body: "*"
    };
  }
  // GetProfileStatus get profile status
  // 获取玩家在线状态
  rpc GetProfileStatus(GetProfileStatusRequest) returns (GetProfileStatusResponse) {
    option (google.api.http) = {
      post: "/v1/profile/status"
      body: "*"
    };
  }
  // WatchProfile watch profile
  // 监听玩家基本信息变化
  rpc WatchProfile(WatchProfileRequest) returns (stream WatchProfileResponse) {}
}
service ProfilePrivateService {
  // GetProfilePrivate get profile info for private use,like gm,admin etc
  // 获取玩家信息，如gm，admin等
  rpc GetProfilePrivate(GetProfilePrivateRequest) returns (GetProfilePrivateResponse) {}
  // SetProfileStatus set profile status
  // 设置玩家在线状态
  rpc SetProfileStatus(SetProfileStatusRequest) returns (SetProfileStatusResponse) {}
  // GetProfileBasics multiple get profile basics, for friends, leaderboard etc
  // 批量获取玩家基本信息,适用于好友，排行榜等等
  rpc GetProfileBasics(GetProfileBasicsRequest) returns (GetProfileBasicsResponse) {}
}

message Profile {
  string uid = 1;
  string nickname = 2;
  string avatar = 3;
  int32 online_status = 6;
  int32 channel = 7;
  string phone = 9;
  string email = 10;
  string device_id = 11;
  int64 recharge_amount = 12;
  string register_ip = 13;
  int64 register_time = 14;
  string platform_id = 15;
  int64 last_login_time = 16;
  map<string, string> extra = 17;
}

message IsProfileExistRequest {
  string uid = 1;
}

message IsProfileExistResponse {
  bool exist = 1;
}

message GetProfileRequest {
  string uid = 1;
}

message GetProfileResponse {
  Profile profile = 1;
}

message CreateProfileRequest {
  Profile profile = 1;
}

message CreateProfileResponse {
  Profile profile = 1;
}

message UpdateProfileRequest {
  Profile profile = 1;
  ProfileBasic basic = 2; //basic info in redis
}

message UpdateProfileResponse {
  Profile profile = 1;
}

message SetProfileStatusRequest {
  string uid = 1;
  int32 status = 2;
}

message SetProfileStatusResponse {}

message GetProfileStatusRequest {
  repeated string uid = 1;
}

message GetProfileStatusResponse {
  map<string, int32> status = 1;
}

message WatchProfileRequest {
  string uid = 1;
}

message WatchProfileResponse {
  Profile profile = 1;
}

message ProfileBasic {
  string uid = 1;
  string nickname = 2;
  string avatar = 3;
  int32 online_status = 4;
  map<string, string> extra = 5;
}

message GetProfileBasicsRequest {
  repeated string uid = 1;
}

message GetProfileBasicsResponse {
  map<string, ProfileBasic> basics = 1;
}

message GetProfilePrivateRequest {
  message Uids {
    repeated string uid = 1;
  }
  message All {
    int32 page = 1;
    int32 page_size = 2;
  }
  message Name {
    string name = 1;
    bool is_regexp = 2; // is find by regexp
    int32 page = 3; // if is_regexp is true, page is required start from 1
    int32 page_size = 4; // if is_regexp is true, page_size is required default 10
  }
  oneof kind {
    Uids uids = 1;
    Name name = 2;
    All all = 3;
    string account = 4;
  }
  string platform_id = 5;
  string channel_id = 6;
}

message GetProfilePrivateResponse {
  repeated Profile profiles = 1;
}