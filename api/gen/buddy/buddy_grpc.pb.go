// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: buddy/buddy.proto

package buddy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BuddyService_AddBuddy_FullMethodName              = "/buddy.pb.BuddyService/AddBuddy"
	BuddyService_RemoveBuddy_FullMethodName           = "/buddy.pb.BuddyService/RemoveBuddy"
	BuddyService_GetBuddies_FullMethodName            = "/buddy.pb.BuddyService/GetBuddies"
	BuddyService_ReplyAddBuddy_FullMethodName         = "/buddy.pb.BuddyService/ReplyAddBuddy"
	BuddyService_WatchBuddies_FullMethodName          = "/buddy.pb.BuddyService/WatchBuddies"
	BuddyService_Remark_FullMethodName                = "/buddy.pb.BuddyService/Remark"
	BuddyService_RefuseBuddy_FullMethodName           = "/buddy.pb.BuddyService/RefuseBuddy"
	BuddyService_GetBlockedProfiles_FullMethodName    = "/buddy.pb.BuddyService/GetBlockedProfiles"
	BuddyService_AddBlockedProfiles_FullMethodName    = "/buddy.pb.BuddyService/AddBlockedProfiles"
	BuddyService_RemoveBlockedProfiles_FullMethodName = "/buddy.pb.BuddyService/RemoveBlockedProfiles"
	BuddyService_VerifyBlocked_FullMethodName         = "/buddy.pb.BuddyService/VerifyBlocked"
	BuddyService_DeleteAccount_FullMethodName         = "/buddy.pb.BuddyService/DeleteAccount"
)

// BuddyServiceClient is the client API for BuddyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PublicService is a public service for managing buddies for the current user.
type BuddyServiceClient interface {
	// AddBuddy adds a buddy to the current user's queue.
	// 添加好友请求
	AddBuddy(ctx context.Context, in *AddBuddyRequest, opts ...grpc.CallOption) (*AddBuddyResponse, error)
	// RemoveBuddy removes a buddy from the current user's queue.
	RemoveBuddy(ctx context.Context, in *RemoveBuddyRequest, opts ...grpc.CallOption) (*Nothing, error)
	// GetBuddies returns the current user's buddies.
	GetBuddies(ctx context.Context, in *GetBuddyRequest, opts ...grpc.CallOption) (*GetBuddyResponse, error)
	// ReplyAddBuddy is called to accept or reject a buddy add request.
	ReplyAddBuddy(ctx context.Context, in *ReplyAddBuddyRequest, opts ...grpc.CallOption) (*ReplyAddBuddyResponse, error)
	// WatchBuddies returns a stream on which changes to the current user's
	//buddies and blocked list  and recent met will be sent.
	WatchBuddies(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (BuddyService_WatchBuddiesClient, error)
	// Remark adds a buddy remark.
	Remark(ctx context.Context, in *RemarkRequest, opts ...grpc.CallOption) (*Nothing, error)
	//Refuse buddy request
	RefuseBuddy(ctx context.Context, in *RefuseBuddyRequest, opts ...grpc.CallOption) (*Nothing, error)
	//---------------------------------------------Blocked List Start------------------------------------
	// GetBlockedUsers returns the current user's blocked users.
	GetBlockedProfiles(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*ProfileIds, error)
	//AddBlockedUsers is called to add users to self's buddy list or blocked list
	AddBlockedProfiles(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error)
	//RemoveBlockedUsers is called to remove users to self's buddy list or blocked list
	RemoveBlockedProfiles(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error)
	VerifyBlocked(ctx context.Context, in *VerifyBlockedRequest, opts ...grpc.CallOption) (*VerifyBlockedResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
}

type buddyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuddyServiceClient(cc grpc.ClientConnInterface) BuddyServiceClient {
	return &buddyServiceClient{cc}
}

func (c *buddyServiceClient) AddBuddy(ctx context.Context, in *AddBuddyRequest, opts ...grpc.CallOption) (*AddBuddyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBuddyResponse)
	err := c.cc.Invoke(ctx, BuddyService_AddBuddy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) RemoveBuddy(ctx context.Context, in *RemoveBuddyRequest, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, BuddyService_RemoveBuddy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) GetBuddies(ctx context.Context, in *GetBuddyRequest, opts ...grpc.CallOption) (*GetBuddyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBuddyResponse)
	err := c.cc.Invoke(ctx, BuddyService_GetBuddies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) ReplyAddBuddy(ctx context.Context, in *ReplyAddBuddyRequest, opts ...grpc.CallOption) (*ReplyAddBuddyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplyAddBuddyResponse)
	err := c.cc.Invoke(ctx, BuddyService_ReplyAddBuddy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) WatchBuddies(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (BuddyService_WatchBuddiesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BuddyService_ServiceDesc.Streams[0], BuddyService_WatchBuddies_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &buddyServiceWatchBuddiesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BuddyService_WatchBuddiesClient interface {
	Recv() (*BuddyChanges, error)
	grpc.ClientStream
}

type buddyServiceWatchBuddiesClient struct {
	grpc.ClientStream
}

func (x *buddyServiceWatchBuddiesClient) Recv() (*BuddyChanges, error) {
	m := new(BuddyChanges)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buddyServiceClient) Remark(ctx context.Context, in *RemarkRequest, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, BuddyService_Remark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) RefuseBuddy(ctx context.Context, in *RefuseBuddyRequest, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, BuddyService_RefuseBuddy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) GetBlockedProfiles(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*ProfileIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileIds)
	err := c.cc.Invoke(ctx, BuddyService_GetBlockedProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) AddBlockedProfiles(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, BuddyService_AddBlockedProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) RemoveBlockedProfiles(ctx context.Context, in *ProfileIds, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, BuddyService_RemoveBlockedProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) VerifyBlocked(ctx context.Context, in *VerifyBlockedRequest, opts ...grpc.CallOption) (*VerifyBlockedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyBlockedResponse)
	err := c.cc.Invoke(ctx, BuddyService_VerifyBlocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buddyServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, BuddyService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuddyServiceServer is the server API for BuddyService service.
// All implementations should embed UnimplementedBuddyServiceServer
// for forward compatibility
//
// PublicService is a public service for managing buddies for the current user.
type BuddyServiceServer interface {
	// AddBuddy adds a buddy to the current user's queue.
	// 添加好友请求
	AddBuddy(context.Context, *AddBuddyRequest) (*AddBuddyResponse, error)
	// RemoveBuddy removes a buddy from the current user's queue.
	RemoveBuddy(context.Context, *RemoveBuddyRequest) (*Nothing, error)
	// GetBuddies returns the current user's buddies.
	GetBuddies(context.Context, *GetBuddyRequest) (*GetBuddyResponse, error)
	// ReplyAddBuddy is called to accept or reject a buddy add request.
	ReplyAddBuddy(context.Context, *ReplyAddBuddyRequest) (*ReplyAddBuddyResponse, error)
	// WatchBuddies returns a stream on which changes to the current user's
	//buddies and blocked list  and recent met will be sent.
	WatchBuddies(*Nothing, BuddyService_WatchBuddiesServer) error
	// Remark adds a buddy remark.
	Remark(context.Context, *RemarkRequest) (*Nothing, error)
	//Refuse buddy request
	RefuseBuddy(context.Context, *RefuseBuddyRequest) (*Nothing, error)
	//---------------------------------------------Blocked List Start------------------------------------
	// GetBlockedUsers returns the current user's blocked users.
	GetBlockedProfiles(context.Context, *Nothing) (*ProfileIds, error)
	//AddBlockedUsers is called to add users to self's buddy list or blocked list
	AddBlockedProfiles(context.Context, *ProfileIds) (*Nothing, error)
	//RemoveBlockedUsers is called to remove users to self's buddy list or blocked list
	RemoveBlockedProfiles(context.Context, *ProfileIds) (*Nothing, error)
	VerifyBlocked(context.Context, *VerifyBlockedRequest) (*VerifyBlockedResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
}

// UnimplementedBuddyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBuddyServiceServer struct {
}

func (UnimplementedBuddyServiceServer) AddBuddy(context.Context, *AddBuddyRequest) (*AddBuddyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBuddy not implemented")
}
func (UnimplementedBuddyServiceServer) RemoveBuddy(context.Context, *RemoveBuddyRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBuddy not implemented")
}
func (UnimplementedBuddyServiceServer) GetBuddies(context.Context, *GetBuddyRequest) (*GetBuddyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuddies not implemented")
}
func (UnimplementedBuddyServiceServer) ReplyAddBuddy(context.Context, *ReplyAddBuddyRequest) (*ReplyAddBuddyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyAddBuddy not implemented")
}
func (UnimplementedBuddyServiceServer) WatchBuddies(*Nothing, BuddyService_WatchBuddiesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBuddies not implemented")
}
func (UnimplementedBuddyServiceServer) Remark(context.Context, *RemarkRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remark not implemented")
}
func (UnimplementedBuddyServiceServer) RefuseBuddy(context.Context, *RefuseBuddyRequest) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefuseBuddy not implemented")
}
func (UnimplementedBuddyServiceServer) GetBlockedProfiles(context.Context, *Nothing) (*ProfileIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockedProfiles not implemented")
}
func (UnimplementedBuddyServiceServer) AddBlockedProfiles(context.Context, *ProfileIds) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlockedProfiles not implemented")
}
func (UnimplementedBuddyServiceServer) RemoveBlockedProfiles(context.Context, *ProfileIds) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlockedProfiles not implemented")
}
func (UnimplementedBuddyServiceServer) VerifyBlocked(context.Context, *VerifyBlockedRequest) (*VerifyBlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBlocked not implemented")
}
func (UnimplementedBuddyServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}

// UnsafeBuddyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuddyServiceServer will
// result in compilation errors.
type UnsafeBuddyServiceServer interface {
	mustEmbedUnimplementedBuddyServiceServer()
}

func RegisterBuddyServiceServer(s grpc.ServiceRegistrar, srv BuddyServiceServer) {
	s.RegisterService(&BuddyService_ServiceDesc, srv)
}

func _BuddyService_AddBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).AddBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_AddBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).AddBuddy(ctx, req.(*AddBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_RemoveBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).RemoveBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_RemoveBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).RemoveBuddy(ctx, req.(*RemoveBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_GetBuddies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).GetBuddies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_GetBuddies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).GetBuddies(ctx, req.(*GetBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_ReplyAddBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyAddBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).ReplyAddBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_ReplyAddBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).ReplyAddBuddy(ctx, req.(*ReplyAddBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_WatchBuddies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuddyServiceServer).WatchBuddies(m, &buddyServiceWatchBuddiesServer{ServerStream: stream})
}

type BuddyService_WatchBuddiesServer interface {
	Send(*BuddyChanges) error
	grpc.ServerStream
}

type buddyServiceWatchBuddiesServer struct {
	grpc.ServerStream
}

func (x *buddyServiceWatchBuddiesServer) Send(m *BuddyChanges) error {
	return x.ServerStream.SendMsg(m)
}

func _BuddyService_Remark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).Remark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_Remark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).Remark(ctx, req.(*RemarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_RefuseBuddy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefuseBuddyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).RefuseBuddy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_RefuseBuddy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).RefuseBuddy(ctx, req.(*RefuseBuddyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_GetBlockedProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).GetBlockedProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_GetBlockedProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).GetBlockedProfiles(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_AddBlockedProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).AddBlockedProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_AddBlockedProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).AddBlockedProfiles(ctx, req.(*ProfileIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_RemoveBlockedProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).RemoveBlockedProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_RemoveBlockedProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).RemoveBlockedProfiles(ctx, req.(*ProfileIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_VerifyBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).VerifyBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_VerifyBlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).VerifyBlocked(ctx, req.(*VerifyBlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuddyService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuddyServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuddyService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuddyServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuddyService_ServiceDesc is the grpc.ServiceDesc for BuddyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuddyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buddy.pb.BuddyService",
	HandlerType: (*BuddyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBuddy",
			Handler:    _BuddyService_AddBuddy_Handler,
		},
		{
			MethodName: "RemoveBuddy",
			Handler:    _BuddyService_RemoveBuddy_Handler,
		},
		{
			MethodName: "GetBuddies",
			Handler:    _BuddyService_GetBuddies_Handler,
		},
		{
			MethodName: "ReplyAddBuddy",
			Handler:    _BuddyService_ReplyAddBuddy_Handler,
		},
		{
			MethodName: "Remark",
			Handler:    _BuddyService_Remark_Handler,
		},
		{
			MethodName: "RefuseBuddy",
			Handler:    _BuddyService_RefuseBuddy_Handler,
		},
		{
			MethodName: "GetBlockedProfiles",
			Handler:    _BuddyService_GetBlockedProfiles_Handler,
		},
		{
			MethodName: "AddBlockedProfiles",
			Handler:    _BuddyService_AddBlockedProfiles_Handler,
		},
		{
			MethodName: "RemoveBlockedProfiles",
			Handler:    _BuddyService_RemoveBlockedProfiles_Handler,
		},
		{
			MethodName: "VerifyBlocked",
			Handler:    _BuddyService_VerifyBlocked_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _BuddyService_DeleteAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBuddies",
			Handler:       _BuddyService_WatchBuddies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "buddy/buddy.proto",
}
