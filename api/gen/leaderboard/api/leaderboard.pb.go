// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: leaderboard/leaderboard.proto

// LeaderboardService is a service for leaderboard，can be used for different leaderboards in the game
// 排行榜服务 可用于游戏中的不同排行榜

package leaderboard

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateScoreRequest_UpdateType int32

const (
	// add score default
	UpdateScoreRequest_ADD UpdateScoreRequest_UpdateType = 0
	// replace when greater than old score
	UpdateScoreRequest_GTR UpdateScoreRequest_UpdateType = 1
	// replace when less than old score
	UpdateScoreRequest_LSR UpdateScoreRequest_UpdateType = 2
)

// Enum value maps for UpdateScoreRequest_UpdateType.
var (
	UpdateScoreRequest_UpdateType_name = map[int32]string{
		0: "ADD",
		1: "GTR",
		2: "LSR",
	}
	UpdateScoreRequest_UpdateType_value = map[string]int32{
		"ADD": 0,
		"GTR": 1,
		"LSR": 2,
	}
)

func (x UpdateScoreRequest_UpdateType) Enum() *UpdateScoreRequest_UpdateType {
	p := new(UpdateScoreRequest_UpdateType)
	*p = x
	return p
}

func (x UpdateScoreRequest_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateScoreRequest_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_leaderboard_leaderboard_proto_enumTypes[0].Descriptor()
}

func (UpdateScoreRequest_UpdateType) Type() protoreflect.EnumType {
	return &file_leaderboard_leaderboard_proto_enumTypes[0]
}

func (x UpdateScoreRequest_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateScoreRequest_UpdateType.Descriptor instead.
func (UpdateScoreRequest_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{3, 0}
}

type GetLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// leaderboard id, required
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// page number, default 1
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// page size, default 10
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetLeaderboardRequest) Reset() {
	*x = GetLeaderboardRequest{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardRequest) ProtoMessage() {}

func (x *GetLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{0}
}

func (x *GetLeaderboardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetLeaderboardRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetLeaderboardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type LeaderboardEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// member uid
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// member score
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	// member star number
	Star int64 `protobuf:"varint,4,opt,name=star,proto3" json:"star,omitempty"`
}

func (x *LeaderboardEntry) Reset() {
	*x = LeaderboardEntry{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardEntry) ProtoMessage() {}

func (x *LeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardEntry.ProtoReflect.Descriptor instead.
func (*LeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{1}
}

func (x *LeaderboardEntry) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *LeaderboardEntry) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LeaderboardEntry) GetStar() int64 {
	if x != nil {
		return x.Star
	}
	return 0
}

type GetLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries   []*LeaderboardEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	IsDeleted bool                `protobuf:"varint,2,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
}

func (x *GetLeaderboardResponse) Reset() {
	*x = GetLeaderboardResponse{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderboardResponse) ProtoMessage() {}

func (x *GetLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*GetLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{2}
}

func (x *GetLeaderboardResponse) GetEntries() []*LeaderboardEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *GetLeaderboardResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type UpdateScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                   // leaderboard id
	Scores     map[string]float64            `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // uid -> score
	UpdateType UpdateScoreRequest_UpdateType `protobuf:"varint,3,opt,name=update_type,json=updateType,proto3,enum=leaderboard.v1.UpdateScoreRequest_UpdateType" json:"update_type,omitempty"`              // default ADD
}

func (x *UpdateScoreRequest) Reset() {
	*x = UpdateScoreRequest{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScoreRequest) ProtoMessage() {}

func (x *UpdateScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScoreRequest.ProtoReflect.Descriptor instead.
func (*UpdateScoreRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateScoreRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateScoreRequest) GetScores() map[string]float64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *UpdateScoreRequest) GetUpdateType() UpdateScoreRequest_UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateScoreRequest_ADD
}

type UpdateScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                   //leaderboard id
	OldUid     string `protobuf:"bytes,2,opt,name=old_uid,json=oldUid,proto3" json:"old_uid,omitempty"`             //old player uid
	CurrentUid string `protobuf:"bytes,3,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"` //current player uid
}

func (x *UpdateScoreResponse) Reset() {
	*x = UpdateScoreResponse{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScoreResponse) ProtoMessage() {}

func (x *UpdateScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScoreResponse.ProtoReflect.Descriptor instead.
func (*UpdateScoreResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateScoreResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateScoreResponse) GetOldUid() string {
	if x != nil {
		return x.OldUid
	}
	return ""
}

func (x *UpdateScoreResponse) GetCurrentUid() string {
	if x != nil {
		return x.CurrentUid
	}
	return ""
}

type GetRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // leaderboard id
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"` // country code
}

func (x *GetRankRequest) Reset() {
	*x = GetRankRequest{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankRequest) ProtoMessage() {}

func (x *GetRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankRequest.ProtoReflect.Descriptor instead.
func (*GetRankRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{5}
}

func (x *GetRankRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRankRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type GetRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank  int64   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *GetRankResponse) Reset() {
	*x = GetRankResponse{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankResponse) ProtoMessage() {}

func (x *GetRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankResponse.ProtoReflect.Descriptor instead.
func (*GetRankResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{6}
}

func (x *GetRankResponse) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetRankResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ExpireLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                    // leaderboard id
	ExpireTime int64  `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` // expire time in day(default:30d)
	Num        int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`                                 // number of entries need return
}

func (x *ExpireLeaderboardRequest) Reset() {
	*x = ExpireLeaderboardRequest{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpireLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireLeaderboardRequest) ProtoMessage() {}

func (x *ExpireLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*ExpireLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{7}
}

func (x *ExpireLeaderboardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExpireLeaderboardRequest) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ExpireLeaderboardRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type ExpireLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is expired, if leaderboard already expired, return false, otherwise return true
	IsDeleted bool `protobuf:"varint,1,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// leaderboard entries
	Entries []*LeaderboardEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ExpireLeaderboardResponse) Reset() {
	*x = ExpireLeaderboardResponse{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpireLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireLeaderboardResponse) ProtoMessage() {}

func (x *ExpireLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*ExpireLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{8}
}

func (x *ExpireLeaderboardResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ExpireLeaderboardResponse) GetEntries() []*LeaderboardEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ClearLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // leaderboard id
}

func (x *ClearLeaderboardRequest) Reset() {
	*x = ClearLeaderboardRequest{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearLeaderboardRequest) ProtoMessage() {}

func (x *ClearLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*ClearLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{9}
}

func (x *ClearLeaderboardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ClearLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearLeaderboardResponse) Reset() {
	*x = ClearLeaderboardResponse{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearLeaderboardResponse) ProtoMessage() {}

func (x *ClearLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*ClearLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{10}
}

type StarLeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // leaderboard id
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *StarLeaderboardRequest) Reset() {
	*x = StarLeaderboardRequest{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StarLeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarLeaderboardRequest) ProtoMessage() {}

func (x *StarLeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarLeaderboardRequest.ProtoReflect.Descriptor instead.
func (*StarLeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{11}
}

func (x *StarLeaderboardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StarLeaderboardRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type StarLeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarCount int64 `protobuf:"varint,1,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
}

func (x *StarLeaderboardResponse) Reset() {
	*x = StarLeaderboardResponse{}
	mi := &file_leaderboard_leaderboard_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StarLeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarLeaderboardResponse) ProtoMessage() {}

func (x *StarLeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_leaderboard_leaderboard_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarLeaderboardResponse.ProtoReflect.Descriptor instead.
func (*StarLeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_leaderboard_leaderboard_proto_rawDescGZIP(), []int{12}
}

func (x *StarLeaderboardResponse) GetStarCount() int64 {
	if x != nil {
		return x.StarCount
	}
	return 0
}

var File_leaderboard_leaderboard_proto protoreflect.FileDescriptor

var file_leaderboard_leaderboard_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4e, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xa0, 0x02, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x54, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x53, 0x52, 0x10, 0x02, 0x22,
	0x5f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x55, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64,
	0x22, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3b, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5d, 0x0a, 0x18, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x76, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x29, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x88, 0x03,
	0x0a, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a,
	0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x6b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1e, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a,
	0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x32, 0xc4, 0x02, 0x0a, 0x19, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x22, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x9c, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1b, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x0e,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x0e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1a, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_leaderboard_leaderboard_proto_rawDescOnce sync.Once
	file_leaderboard_leaderboard_proto_rawDescData = file_leaderboard_leaderboard_proto_rawDesc
)

func file_leaderboard_leaderboard_proto_rawDescGZIP() []byte {
	file_leaderboard_leaderboard_proto_rawDescOnce.Do(func() {
		file_leaderboard_leaderboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_leaderboard_leaderboard_proto_rawDescData)
	})
	return file_leaderboard_leaderboard_proto_rawDescData
}

var file_leaderboard_leaderboard_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_leaderboard_leaderboard_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_leaderboard_leaderboard_proto_goTypes = []any{
	(UpdateScoreRequest_UpdateType)(0), // 0: leaderboard.v1.UpdateScoreRequest.UpdateType
	(*GetLeaderboardRequest)(nil),      // 1: leaderboard.v1.GetLeaderboardRequest
	(*LeaderboardEntry)(nil),           // 2: leaderboard.v1.LeaderboardEntry
	(*GetLeaderboardResponse)(nil),     // 3: leaderboard.v1.GetLeaderboardResponse
	(*UpdateScoreRequest)(nil),         // 4: leaderboard.v1.UpdateScoreRequest
	(*UpdateScoreResponse)(nil),        // 5: leaderboard.v1.UpdateScoreResponse
	(*GetRankRequest)(nil),             // 6: leaderboard.v1.GetRankRequest
	(*GetRankResponse)(nil),            // 7: leaderboard.v1.GetRankResponse
	(*ExpireLeaderboardRequest)(nil),   // 8: leaderboard.v1.ExpireLeaderboardRequest
	(*ExpireLeaderboardResponse)(nil),  // 9: leaderboard.v1.ExpireLeaderboardResponse
	(*ClearLeaderboardRequest)(nil),    // 10: leaderboard.v1.ClearLeaderboardRequest
	(*ClearLeaderboardResponse)(nil),   // 11: leaderboard.v1.ClearLeaderboardResponse
	(*StarLeaderboardRequest)(nil),     // 12: leaderboard.v1.StarLeaderboardRequest
	(*StarLeaderboardResponse)(nil),    // 13: leaderboard.v1.StarLeaderboardResponse
	nil,                                // 14: leaderboard.v1.UpdateScoreRequest.ScoresEntry
}
var file_leaderboard_leaderboard_proto_depIdxs = []int32{
	2,  // 0: leaderboard.v1.GetLeaderboardResponse.entries:type_name -> leaderboard.v1.LeaderboardEntry
	14, // 1: leaderboard.v1.UpdateScoreRequest.scores:type_name -> leaderboard.v1.UpdateScoreRequest.ScoresEntry
	0,  // 2: leaderboard.v1.UpdateScoreRequest.update_type:type_name -> leaderboard.v1.UpdateScoreRequest.UpdateType
	2,  // 3: leaderboard.v1.ExpireLeaderboardResponse.entries:type_name -> leaderboard.v1.LeaderboardEntry
	1,  // 4: leaderboard.v1.LeaderboardService.GetLeaderboard:input_type -> leaderboard.v1.GetLeaderboardRequest
	6,  // 5: leaderboard.v1.LeaderboardService.GetRank:input_type -> leaderboard.v1.GetRankRequest
	12, // 6: leaderboard.v1.LeaderboardService.StarLeaderboard:input_type -> leaderboard.v1.StarLeaderboardRequest
	8,  // 7: leaderboard.v1.LeaderboardPrivateService.ExpireLeaderboard:input_type -> leaderboard.v1.ExpireLeaderboardRequest
	4,  // 8: leaderboard.v1.LeaderboardPrivateService.UpdateScore:input_type -> leaderboard.v1.UpdateScoreRequest
	10, // 9: leaderboard.v1.LeaderboardPrivateService.ClearLeaderboard:input_type -> leaderboard.v1.ClearLeaderboardRequest
	3,  // 10: leaderboard.v1.LeaderboardService.GetLeaderboard:output_type -> leaderboard.v1.GetLeaderboardResponse
	7,  // 11: leaderboard.v1.LeaderboardService.GetRank:output_type -> leaderboard.v1.GetRankResponse
	13, // 12: leaderboard.v1.LeaderboardService.StarLeaderboard:output_type -> leaderboard.v1.StarLeaderboardResponse
	9,  // 13: leaderboard.v1.LeaderboardPrivateService.ExpireLeaderboard:output_type -> leaderboard.v1.ExpireLeaderboardResponse
	5,  // 14: leaderboard.v1.LeaderboardPrivateService.UpdateScore:output_type -> leaderboard.v1.UpdateScoreResponse
	11, // 15: leaderboard.v1.LeaderboardPrivateService.ClearLeaderboard:output_type -> leaderboard.v1.ClearLeaderboardResponse
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_leaderboard_leaderboard_proto_init() }
func file_leaderboard_leaderboard_proto_init() {
	if File_leaderboard_leaderboard_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_leaderboard_leaderboard_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_leaderboard_leaderboard_proto_goTypes,
		DependencyIndexes: file_leaderboard_leaderboard_proto_depIdxs,
		EnumInfos:         file_leaderboard_leaderboard_proto_enumTypes,
		MessageInfos:      file_leaderboard_leaderboard_proto_msgTypes,
	}.Build()
	File_leaderboard_leaderboard_proto = out.File
	file_leaderboard_leaderboard_proto_rawDesc = nil
	file_leaderboard_leaderboard_proto_goTypes = nil
	file_leaderboard_leaderboard_proto_depIdxs = nil
}
