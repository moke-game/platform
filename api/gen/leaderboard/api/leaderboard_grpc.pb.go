// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: leaderboard/leaderboard.proto

// LeaderboardService is a service for leaderboard，can be used for different leaderboards in the game
// 排行榜服务 可用于游戏中的不同排行榜

package leaderboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaderboardService_GetLeaderboard_FullMethodName  = "/leaderboard.v1.LeaderboardService/GetLeaderboard"
	LeaderboardService_GetRank_FullMethodName         = "/leaderboard.v1.LeaderboardService/GetRank"
	LeaderboardService_StarLeaderboard_FullMethodName = "/leaderboard.v1.LeaderboardService/StarLeaderboard"
)

// LeaderboardServiceClient is the client API for LeaderboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LeaderboardService is a service for leaderboard
// 排行榜服务
type LeaderboardServiceClient interface {
	// GetLeaderboard get leaderboard entries
	// 获取排行榜
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	// GetRank get player rank
	// 获取玩家排名
	GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error)
	// StarLeaderboard star a leaderboard
	// 点赞排行榜
	StarLeaderboard(ctx context.Context, in *StarLeaderboardRequest, opts ...grpc.CallOption) (*StarLeaderboardResponse, error)
}

type leaderboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardServiceClient(cc grpc.ClientConnInterface) LeaderboardServiceClient {
	return &leaderboardServiceClient{cc}
}

func (c *leaderboardServiceClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, LeaderboardService_GetLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) GetRank(ctx context.Context, in *GetRankRequest, opts ...grpc.CallOption) (*GetRankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRankResponse)
	err := c.cc.Invoke(ctx, LeaderboardService_GetRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) StarLeaderboard(ctx context.Context, in *StarLeaderboardRequest, opts ...grpc.CallOption) (*StarLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StarLeaderboardResponse)
	err := c.cc.Invoke(ctx, LeaderboardService_StarLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderboardServiceServer is the server API for LeaderboardService service.
// All implementations should embed UnimplementedLeaderboardServiceServer
// for forward compatibility.
//
// LeaderboardService is a service for leaderboard
// 排行榜服务
type LeaderboardServiceServer interface {
	// GetLeaderboard get leaderboard entries
	// 获取排行榜
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	// GetRank get player rank
	// 获取玩家排名
	GetRank(context.Context, *GetRankRequest) (*GetRankResponse, error)
	// StarLeaderboard star a leaderboard
	// 点赞排行榜
	StarLeaderboard(context.Context, *StarLeaderboardRequest) (*StarLeaderboardResponse, error)
}

// UnimplementedLeaderboardServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaderboardServiceServer struct{}

func (UnimplementedLeaderboardServiceServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) GetRank(context.Context, *GetRankRequest) (*GetRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRank not implemented")
}
func (UnimplementedLeaderboardServiceServer) StarLeaderboard(context.Context, *StarLeaderboardRequest) (*StarLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarLeaderboard not implemented")
}
func (UnimplementedLeaderboardServiceServer) testEmbeddedByValue() {}

// UnsafeLeaderboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardServiceServer will
// result in compilation errors.
type UnsafeLeaderboardServiceServer interface {
	mustEmbedUnimplementedLeaderboardServiceServer()
}

func RegisterLeaderboardServiceServer(s grpc.ServiceRegistrar, srv LeaderboardServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaderboardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaderboardService_ServiceDesc, srv)
}

func _LeaderboardService_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderboardService_GetLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_GetRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).GetRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderboardService_GetRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).GetRank(ctx, req.(*GetRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_StarLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).StarLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderboardService_StarLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).StarLeaderboard(ctx, req.(*StarLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderboardService_ServiceDesc is the grpc.ServiceDesc for LeaderboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaderboard.v1.LeaderboardService",
	HandlerType: (*LeaderboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaderboard",
			Handler:    _LeaderboardService_GetLeaderboard_Handler,
		},
		{
			MethodName: "GetRank",
			Handler:    _LeaderboardService_GetRank_Handler,
		},
		{
			MethodName: "StarLeaderboard",
			Handler:    _LeaderboardService_StarLeaderboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaderboard/leaderboard.proto",
}

const (
	LeaderboardPrivateService_ExpireLeaderboard_FullMethodName = "/leaderboard.v1.LeaderboardPrivateService/ExpireLeaderboard"
	LeaderboardPrivateService_UpdateScore_FullMethodName       = "/leaderboard.v1.LeaderboardPrivateService/UpdateScore"
	LeaderboardPrivateService_ClearLeaderboard_FullMethodName  = "/leaderboard.v1.LeaderboardPrivateService/ClearLeaderboard"
)

// LeaderboardPrivateServiceClient is the client API for LeaderboardPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LeaderboardPrivateService is a private service for leaderboard
// 排行榜私有服务, 用于管理排行榜
type LeaderboardPrivateServiceClient interface {
	// expire leaderboard,default 30 days
	// 实排行榜过期, 默认30天
	ExpireLeaderboard(ctx context.Context, in *ExpireLeaderboardRequest, opts ...grpc.CallOption) (*ExpireLeaderboardResponse, error)
	// update leaderboard score
	// 更新排行榜分数
	UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*UpdateScoreResponse, error)
	// clear leaderboard
	// 清空排行榜
	ClearLeaderboard(ctx context.Context, in *ClearLeaderboardRequest, opts ...grpc.CallOption) (*ClearLeaderboardResponse, error)
}

type leaderboardPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardPrivateServiceClient(cc grpc.ClientConnInterface) LeaderboardPrivateServiceClient {
	return &leaderboardPrivateServiceClient{cc}
}

func (c *leaderboardPrivateServiceClient) ExpireLeaderboard(ctx context.Context, in *ExpireLeaderboardRequest, opts ...grpc.CallOption) (*ExpireLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpireLeaderboardResponse)
	err := c.cc.Invoke(ctx, LeaderboardPrivateService_ExpireLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardPrivateServiceClient) UpdateScore(ctx context.Context, in *UpdateScoreRequest, opts ...grpc.CallOption) (*UpdateScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScoreResponse)
	err := c.cc.Invoke(ctx, LeaderboardPrivateService_UpdateScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardPrivateServiceClient) ClearLeaderboard(ctx context.Context, in *ClearLeaderboardRequest, opts ...grpc.CallOption) (*ClearLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearLeaderboardResponse)
	err := c.cc.Invoke(ctx, LeaderboardPrivateService_ClearLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderboardPrivateServiceServer is the server API for LeaderboardPrivateService service.
// All implementations should embed UnimplementedLeaderboardPrivateServiceServer
// for forward compatibility.
//
// LeaderboardPrivateService is a private service for leaderboard
// 排行榜私有服务, 用于管理排行榜
type LeaderboardPrivateServiceServer interface {
	// expire leaderboard,default 30 days
	// 实排行榜过期, 默认30天
	ExpireLeaderboard(context.Context, *ExpireLeaderboardRequest) (*ExpireLeaderboardResponse, error)
	// update leaderboard score
	// 更新排行榜分数
	UpdateScore(context.Context, *UpdateScoreRequest) (*UpdateScoreResponse, error)
	// clear leaderboard
	// 清空排行榜
	ClearLeaderboard(context.Context, *ClearLeaderboardRequest) (*ClearLeaderboardResponse, error)
}

// UnimplementedLeaderboardPrivateServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaderboardPrivateServiceServer struct{}

func (UnimplementedLeaderboardPrivateServiceServer) ExpireLeaderboard(context.Context, *ExpireLeaderboardRequest) (*ExpireLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireLeaderboard not implemented")
}
func (UnimplementedLeaderboardPrivateServiceServer) UpdateScore(context.Context, *UpdateScoreRequest) (*UpdateScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScore not implemented")
}
func (UnimplementedLeaderboardPrivateServiceServer) ClearLeaderboard(context.Context, *ClearLeaderboardRequest) (*ClearLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLeaderboard not implemented")
}
func (UnimplementedLeaderboardPrivateServiceServer) testEmbeddedByValue() {}

// UnsafeLeaderboardPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardPrivateServiceServer will
// result in compilation errors.
type UnsafeLeaderboardPrivateServiceServer interface {
	mustEmbedUnimplementedLeaderboardPrivateServiceServer()
}

func RegisterLeaderboardPrivateServiceServer(s grpc.ServiceRegistrar, srv LeaderboardPrivateServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaderboardPrivateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaderboardPrivateService_ServiceDesc, srv)
}

func _LeaderboardPrivateService_ExpireLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardPrivateServiceServer).ExpireLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderboardPrivateService_ExpireLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardPrivateServiceServer).ExpireLeaderboard(ctx, req.(*ExpireLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardPrivateService_UpdateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardPrivateServiceServer).UpdateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderboardPrivateService_UpdateScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardPrivateServiceServer).UpdateScore(ctx, req.(*UpdateScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardPrivateService_ClearLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardPrivateServiceServer).ClearLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderboardPrivateService_ClearLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardPrivateServiceServer).ClearLeaderboard(ctx, req.(*ClearLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderboardPrivateService_ServiceDesc is the grpc.ServiceDesc for LeaderboardPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderboardPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaderboard.v1.LeaderboardPrivateService",
	HandlerType: (*LeaderboardPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExpireLeaderboard",
			Handler:    _LeaderboardPrivateService_ExpireLeaderboard_Handler,
		},
		{
			MethodName: "UpdateScore",
			Handler:    _LeaderboardPrivateService_UpdateScore_Handler,
		},
		{
			MethodName: "ClearLeaderboard",
			Handler:    _LeaderboardPrivateService_ClearLeaderboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "leaderboard/leaderboard.proto",
}
