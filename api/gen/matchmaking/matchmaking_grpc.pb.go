// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: matchmaking/matchmaking.proto

package matchmaking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MatchService_Match_FullMethodName          = "/matchmaking.pb.MatchService/Match"
	MatchService_PveMatch_FullMethodName       = "/matchmaking.pb.MatchService/PveMatch"
	MatchService_MatchCancel_FullMethodName    = "/matchmaking.pb.MatchService/MatchCancel"
	MatchService_MatchWithRival_FullMethodName = "/matchmaking.pb.MatchService/MatchWithRival"
	MatchService_MatchStatus_FullMethodName    = "/matchmaking.pb.MatchService/MatchStatus"
)

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TODO refactor matchmaking service with open match
type MatchServiceClient interface {
	//  Match match request
	Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	PveMatch(ctx context.Context, in *PveMatchRequest, opts ...grpc.CallOption) (*PveMatchResponse, error)
	MatchCancel(ctx context.Context, in *MatchCancelRequest, opts ...grpc.CallOption) (*MatchCancelResponse, error)
	MatchWithRival(ctx context.Context, in *MatchWithRivalRequest, opts ...grpc.CallOption) (*MatchWitchRivalResponse, error)
	MatchStatus(ctx context.Context, in *MatchStatusRequest, opts ...grpc.CallOption) (*MatchStatusResponse, error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, MatchService_Match_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) PveMatch(ctx context.Context, in *PveMatchRequest, opts ...grpc.CallOption) (*PveMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PveMatchResponse)
	err := c.cc.Invoke(ctx, MatchService_PveMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) MatchCancel(ctx context.Context, in *MatchCancelRequest, opts ...grpc.CallOption) (*MatchCancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchCancelResponse)
	err := c.cc.Invoke(ctx, MatchService_MatchCancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) MatchWithRival(ctx context.Context, in *MatchWithRivalRequest, opts ...grpc.CallOption) (*MatchWitchRivalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchWitchRivalResponse)
	err := c.cc.Invoke(ctx, MatchService_MatchWithRival_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) MatchStatus(ctx context.Context, in *MatchStatusRequest, opts ...grpc.CallOption) (*MatchStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchStatusResponse)
	err := c.cc.Invoke(ctx, MatchService_MatchStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServiceServer is the server API for MatchService service.
// All implementations should embed UnimplementedMatchServiceServer
// for forward compatibility
//
// TODO refactor matchmaking service with open match
type MatchServiceServer interface {
	//  Match match request
	Match(context.Context, *MatchRequest) (*MatchResponse, error)
	PveMatch(context.Context, *PveMatchRequest) (*PveMatchResponse, error)
	MatchCancel(context.Context, *MatchCancelRequest) (*MatchCancelResponse, error)
	MatchWithRival(context.Context, *MatchWithRivalRequest) (*MatchWitchRivalResponse, error)
	MatchStatus(context.Context, *MatchStatusRequest) (*MatchStatusResponse, error)
}

// UnimplementedMatchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMatchServiceServer struct {
}

func (UnimplementedMatchServiceServer) Match(context.Context, *MatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (UnimplementedMatchServiceServer) PveMatch(context.Context, *PveMatchRequest) (*PveMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PveMatch not implemented")
}
func (UnimplementedMatchServiceServer) MatchCancel(context.Context, *MatchCancelRequest) (*MatchCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchCancel not implemented")
}
func (UnimplementedMatchServiceServer) MatchWithRival(context.Context, *MatchWithRivalRequest) (*MatchWitchRivalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchWithRival not implemented")
}
func (UnimplementedMatchServiceServer) MatchStatus(context.Context, *MatchStatusRequest) (*MatchStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchStatus not implemented")
}

// UnsafeMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServiceServer will
// result in compilation errors.
type UnsafeMatchServiceServer interface {
	mustEmbedUnimplementedMatchServiceServer()
}

func RegisterMatchServiceServer(s grpc.ServiceRegistrar, srv MatchServiceServer) {
	s.RegisterService(&MatchService_ServiceDesc, srv)
}

func _MatchService_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_Match_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).Match(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_PveMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PveMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).PveMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_PveMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).PveMatch(ctx, req.(*PveMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_MatchCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).MatchCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_MatchCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).MatchCancel(ctx, req.(*MatchCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_MatchWithRival_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchWithRivalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).MatchWithRival(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_MatchWithRival_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).MatchWithRival(ctx, req.(*MatchWithRivalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_MatchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).MatchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_MatchStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).MatchStatus(ctx, req.(*MatchStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchService_ServiceDesc is the grpc.ServiceDesc for MatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaking.pb.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Match",
			Handler:    _MatchService_Match_Handler,
		},
		{
			MethodName: "PveMatch",
			Handler:    _MatchService_PveMatch_Handler,
		},
		{
			MethodName: "MatchCancel",
			Handler:    _MatchService_MatchCancel_Handler,
		},
		{
			MethodName: "MatchWithRival",
			Handler:    _MatchService_MatchWithRival_Handler,
		},
		{
			MethodName: "MatchStatus",
			Handler:    _MatchService_MatchStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaking/matchmaking.proto",
}
