// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: matchmaking/matchmaking.proto

package matchmaking

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchMessage) Reset() {
	*x = MatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMessage) ProtoMessage() {}

func (x *MatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMessage.ProtoReflect.Descriptor instead.
func (*MatchMessage) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{0}
}

type MatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket    []*Ticket `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	GroupSize int32     `protobuf:"varint,2,opt,name=group_size,json=groupSize,proto3" json:"group_size,omitempty"` // group need size
	PlayId    int32     `protobuf:"varint,3,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`          // room play type
	MapId     []int32   `protobuf:"varint,4,rep,packed,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *MatchRequest) Reset() {
	*x = MatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequest) ProtoMessage() {}

func (x *MatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequest.ProtoReflect.Descriptor instead.
func (*MatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{1}
}

func (x *MatchRequest) GetTicket() []*Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *MatchRequest) GetGroupSize() int32 {
	if x != nil {
		return x.GroupSize
	}
	return 0
}

func (x *MatchRequest) GetPlayId() int32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *MatchRequest) GetMapId() []int32 {
	if x != nil {
		return x.MapId
	}
	return nil
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileId     string            `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`  //user unique id
	DiffTag       int32             `protobuf:"varint,2,opt,name=diff_tag,json=diffTag,proto3" json:"diff_tag,omitempty"`       //差异化区分 英雄ID
	Score         int32             `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                          // score
	Nickname      string            `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`                     // nickname
	Avatar        string            `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`                         // avatar
	HeroLevel     int32             `protobuf:"varint,6,opt,name=hero_level,json=heroLevel,proto3" json:"hero_level,omitempty"` // hero level
	PetProfileId  int64             `protobuf:"varint,7,opt,name=pet_profile_id,json=petProfileId,proto3" json:"pet_profile_id,omitempty"`
	HeroAttribute map[int32]float64 `protobuf:"bytes,8,rep,name=hero_attribute,json=heroAttribute,proto3" json:"hero_attribute,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // hero attribute
	PetAttribute  map[int32]float64 `protobuf:"bytes,9,rep,name=pet_attribute,json=petAttribute,proto3" json:"pet_attribute,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`    //pet add attribute
	HeroCups      int32             `protobuf:"varint,10,opt,name=hero_cups,json=heroCups,proto3" json:"hero_cups,omitempty"`
	PetSkill      map[int32]int32   `protobuf:"bytes,11,rep,name=pet_skill,json=petSkill,proto3" json:"pet_skill,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //宠物携带的技能
	IsAgain       bool              `protobuf:"varint,12,opt,name=is_again,json=isAgain,proto3" json:"is_again,omitempty"`                                                                                             // 是否是再次匹配
	SkinId        int32             `protobuf:"varint,13,opt,name=skin_id,json=skinId,proto3" json:"skin_id,omitempty"`                                                                                                //皮肤ID
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{2}
}

func (x *Ticket) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *Ticket) GetDiffTag() int32 {
	if x != nil {
		return x.DiffTag
	}
	return 0
}

func (x *Ticket) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Ticket) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Ticket) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Ticket) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

func (x *Ticket) GetPetProfileId() int64 {
	if x != nil {
		return x.PetProfileId
	}
	return 0
}

func (x *Ticket) GetHeroAttribute() map[int32]float64 {
	if x != nil {
		return x.HeroAttribute
	}
	return nil
}

func (x *Ticket) GetPetAttribute() map[int32]float64 {
	if x != nil {
		return x.PetAttribute
	}
	return nil
}

func (x *Ticket) GetHeroCups() int32 {
	if x != nil {
		return x.HeroCups
	}
	return 0
}

func (x *Ticket) GetPetSkill() map[int32]int32 {
	if x != nil {
		return x.PetSkill
	}
	return nil
}

func (x *Ticket) GetIsAgain() bool {
	if x != nil {
		return x.IsAgain
	}
	return false
}

func (x *Ticket) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

type BattleRoomData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	RoomId    string `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Addr      string `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	PlayId    int32  `protobuf:"varint,4,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	PlayTime  int64  `protobuf:"varint,5,opt,name=play_time,json=playTime,proto3" json:"play_time,omitempty"`    //游戏时长 秒
	BeginTime int64  `protobuf:"varint,6,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"` //游戏开始时间戳 秒
	MapId     int32  `protobuf:"varint,7,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`             //地图ID
}

func (x *BattleRoomData) Reset() {
	*x = BattleRoomData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleRoomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleRoomData) ProtoMessage() {}

func (x *BattleRoomData) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleRoomData.ProtoReflect.Descriptor instead.
func (*BattleRoomData) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{3}
}

func (x *BattleRoomData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BattleRoomData) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *BattleRoomData) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *BattleRoomData) GetPlayId() int32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *BattleRoomData) GetPlayTime() int64 {
	if x != nil {
		return x.PlayTime
	}
	return 0
}

func (x *BattleRoomData) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *BattleRoomData) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type MatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchResponse) Reset() {
	*x = MatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResponse) ProtoMessage() {}

func (x *MatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResponse.ProtoReflect.Descriptor instead.
func (*MatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{4}
}

type PveMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket    []*Ticket `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	GroupSize int32     `protobuf:"varint,2,opt,name=group_size,json=groupSize,proto3" json:"group_size,omitempty"` // group need size
	PlayId    int32     `protobuf:"varint,3,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`          // room play type
	MapId     []int32   `protobuf:"varint,4,rep,packed,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *PveMatchRequest) Reset() {
	*x = PveMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PveMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PveMatchRequest) ProtoMessage() {}

func (x *PveMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PveMatchRequest.ProtoReflect.Descriptor instead.
func (*PveMatchRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{5}
}

func (x *PveMatchRequest) GetTicket() []*Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *PveMatchRequest) GetGroupSize() int32 {
	if x != nil {
		return x.GroupSize
	}
	return 0
}

func (x *PveMatchRequest) GetPlayId() int32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *PveMatchRequest) GetMapId() []int32 {
	if x != nil {
		return x.MapId
	}
	return nil
}

type PveMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PveMatchResponse) Reset() {
	*x = PveMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PveMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PveMatchResponse) ProtoMessage() {}

func (x *PveMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PveMatchResponse.ProtoReflect.Descriptor instead.
func (*PveMatchResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{6}
}

type MatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleRoomUrl string `protobuf:"bytes,1,opt,name=battle_room_url,json=battleRoomUrl,proto3" json:"battle_room_url,omitempty"`
	BattleRoomId  string `protobuf:"bytes,2,opt,name=battle_room_id,json=battleRoomId,proto3" json:"battle_room_id,omitempty"`
	AuthByte      []byte `protobuf:"bytes,3,opt,name=auth_byte,json=authByte,proto3" json:"auth_byte,omitempty"`
	PlayId        int32  `protobuf:"varint,4,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"` // match request play_id
	MapId         int32  `protobuf:"varint,5,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
}

func (x *MatchResult) Reset() {
	*x = MatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResult) ProtoMessage() {}

func (x *MatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResult.ProtoReflect.Descriptor instead.
func (*MatchResult) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{7}
}

func (x *MatchResult) GetBattleRoomUrl() string {
	if x != nil {
		return x.BattleRoomUrl
	}
	return ""
}

func (x *MatchResult) GetBattleRoomId() string {
	if x != nil {
		return x.BattleRoomId
	}
	return ""
}

func (x *MatchResult) GetAuthByte() []byte {
	if x != nil {
		return x.AuthByte
	}
	return nil
}

func (x *MatchResult) GetPlayId() int32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

func (x *MatchResult) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

type MatchCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"` //user unique id
}

func (x *MatchCancelRequest) Reset() {
	*x = MatchCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCancelRequest) ProtoMessage() {}

func (x *MatchCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCancelRequest.ProtoReflect.Descriptor instead.
func (*MatchCancelRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{8}
}

func (x *MatchCancelRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type MatchCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchCancelResponse) Reset() {
	*x = MatchCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCancelResponse) ProtoMessage() {}

func (x *MatchCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCancelResponse.ProtoReflect.Descriptor instead.
func (*MatchCancelResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{9}
}

type MatchWithRivalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket      []*Ticket `protobuf:"bytes,1,rep,name=ticket,proto3" json:"ticket,omitempty"`
	RivalTicket []*Ticket `protobuf:"bytes,2,rep,name=rival_ticket,json=rivalTicket,proto3" json:"rival_ticket,omitempty"`
	PlayId      int32     `protobuf:"varint,3,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"` // room play type
}

func (x *MatchWithRivalRequest) Reset() {
	*x = MatchWithRivalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchWithRivalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchWithRivalRequest) ProtoMessage() {}

func (x *MatchWithRivalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchWithRivalRequest.ProtoReflect.Descriptor instead.
func (*MatchWithRivalRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{10}
}

func (x *MatchWithRivalRequest) GetTicket() []*Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *MatchWithRivalRequest) GetRivalTicket() []*Ticket {
	if x != nil {
		return x.RivalTicket
	}
	return nil
}

func (x *MatchWithRivalRequest) GetPlayId() int32 {
	if x != nil {
		return x.PlayId
	}
	return 0
}

type MatchWitchRivalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchWitchRivalResponse) Reset() {
	*x = MatchWitchRivalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchWitchRivalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchWitchRivalResponse) ProtoMessage() {}

func (x *MatchWitchRivalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchWitchRivalResponse.ProtoReflect.Descriptor instead.
func (*MatchWitchRivalResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{11}
}

type MatchingCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchingCancel) Reset() {
	*x = MatchingCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingCancel) ProtoMessage() {}

func (x *MatchingCancel) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingCancel.ProtoReflect.Descriptor instead.
func (*MatchingCancel) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{12}
}

type MatchStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"` //user unique id
}

func (x *MatchStatusRequest) Reset() {
	*x = MatchStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStatusRequest) ProtoMessage() {}

func (x *MatchStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStatusRequest.ProtoReflect.Descriptor instead.
func (*MatchStatusRequest) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{13}
}

func (x *MatchStatusRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type MatchStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchTime int64 `protobuf:"varint,1,opt,name=match_time,json=matchTime,proto3" json:"match_time,omitempty"` //开始匹配的时间
}

func (x *MatchStatusResponse) Reset() {
	*x = MatchStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaking_matchmaking_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStatusResponse) ProtoMessage() {}

func (x *MatchStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaking_matchmaking_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStatusResponse.ProtoReflect.Descriptor instead.
func (*MatchStatusResponse) Descriptor() ([]byte, []int) {
	return file_matchmaking_matchmaking_proto_rawDescGZIP(), []int{14}
}

func (x *MatchStatusResponse) GetMatchTime() int64 {
	if x != nil {
		return x.MatchTime
	}
	return 0
}

var File_matchmaking_matchmaking_proto protoreflect.FileDescriptor

var file_matchmaking_matchmaking_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x22,
	0x0e, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22,
	0xc6, 0x05, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x66,
	0x66, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x75, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x43, 0x75, 0x70,
	0x73, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x65, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x65, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x65, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x1a, 0x40, 0x0a, 0x12, 0x48, 0x65, 0x72, 0x6f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x50,
	0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x50, 0x76, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x76,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x42, 0x79, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x15,
	0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x39, 0x0a, 0x0c, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10,
	0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x22, 0x33, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xbf, 0x03, 0x0a, 0x0c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x05,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x50, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57, 0x69, 0x74, 0x68, 0x52, 0x69, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x57,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x69, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x22, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1d, 0x5a,
	0x1b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x3b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_matchmaking_matchmaking_proto_rawDescOnce sync.Once
	file_matchmaking_matchmaking_proto_rawDescData = file_matchmaking_matchmaking_proto_rawDesc
)

func file_matchmaking_matchmaking_proto_rawDescGZIP() []byte {
	file_matchmaking_matchmaking_proto_rawDescOnce.Do(func() {
		file_matchmaking_matchmaking_proto_rawDescData = protoimpl.X.CompressGZIP(file_matchmaking_matchmaking_proto_rawDescData)
	})
	return file_matchmaking_matchmaking_proto_rawDescData
}

var file_matchmaking_matchmaking_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_matchmaking_matchmaking_proto_goTypes = []any{
	(*MatchMessage)(nil),            // 0: matchmaking.pb.MatchMessage
	(*MatchRequest)(nil),            // 1: matchmaking.pb.MatchRequest
	(*Ticket)(nil),                  // 2: matchmaking.pb.Ticket
	(*BattleRoomData)(nil),          // 3: matchmaking.pb.BattleRoomData
	(*MatchResponse)(nil),           // 4: matchmaking.pb.MatchResponse
	(*PveMatchRequest)(nil),         // 5: matchmaking.pb.PveMatchRequest
	(*PveMatchResponse)(nil),        // 6: matchmaking.pb.PveMatchResponse
	(*MatchResult)(nil),             // 7: matchmaking.pb.MatchResult
	(*MatchCancelRequest)(nil),      // 8: matchmaking.pb.MatchCancelRequest
	(*MatchCancelResponse)(nil),     // 9: matchmaking.pb.MatchCancelResponse
	(*MatchWithRivalRequest)(nil),   // 10: matchmaking.pb.MatchWithRivalRequest
	(*MatchWitchRivalResponse)(nil), // 11: matchmaking.pb.MatchWitchRivalResponse
	(*MatchingCancel)(nil),          // 12: matchmaking.pb.MatchingCancel
	(*MatchStatusRequest)(nil),      // 13: matchmaking.pb.MatchStatusRequest
	(*MatchStatusResponse)(nil),     // 14: matchmaking.pb.MatchStatusResponse
	nil,                             // 15: matchmaking.pb.Ticket.HeroAttributeEntry
	nil,                             // 16: matchmaking.pb.Ticket.PetAttributeEntry
	nil,                             // 17: matchmaking.pb.Ticket.PetSkillEntry
}
var file_matchmaking_matchmaking_proto_depIdxs = []int32{
	2,  // 0: matchmaking.pb.MatchRequest.ticket:type_name -> matchmaking.pb.Ticket
	15, // 1: matchmaking.pb.Ticket.hero_attribute:type_name -> matchmaking.pb.Ticket.HeroAttributeEntry
	16, // 2: matchmaking.pb.Ticket.pet_attribute:type_name -> matchmaking.pb.Ticket.PetAttributeEntry
	17, // 3: matchmaking.pb.Ticket.pet_skill:type_name -> matchmaking.pb.Ticket.PetSkillEntry
	2,  // 4: matchmaking.pb.PveMatchRequest.ticket:type_name -> matchmaking.pb.Ticket
	2,  // 5: matchmaking.pb.MatchWithRivalRequest.ticket:type_name -> matchmaking.pb.Ticket
	2,  // 6: matchmaking.pb.MatchWithRivalRequest.rival_ticket:type_name -> matchmaking.pb.Ticket
	1,  // 7: matchmaking.pb.MatchService.Match:input_type -> matchmaking.pb.MatchRequest
	5,  // 8: matchmaking.pb.MatchService.PveMatch:input_type -> matchmaking.pb.PveMatchRequest
	8,  // 9: matchmaking.pb.MatchService.MatchCancel:input_type -> matchmaking.pb.MatchCancelRequest
	10, // 10: matchmaking.pb.MatchService.MatchWithRival:input_type -> matchmaking.pb.MatchWithRivalRequest
	13, // 11: matchmaking.pb.MatchService.MatchStatus:input_type -> matchmaking.pb.MatchStatusRequest
	4,  // 12: matchmaking.pb.MatchService.Match:output_type -> matchmaking.pb.MatchResponse
	6,  // 13: matchmaking.pb.MatchService.PveMatch:output_type -> matchmaking.pb.PveMatchResponse
	9,  // 14: matchmaking.pb.MatchService.MatchCancel:output_type -> matchmaking.pb.MatchCancelResponse
	11, // 15: matchmaking.pb.MatchService.MatchWithRival:output_type -> matchmaking.pb.MatchWitchRivalResponse
	14, // 16: matchmaking.pb.MatchService.MatchStatus:output_type -> matchmaking.pb.MatchStatusResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_matchmaking_matchmaking_proto_init() }
func file_matchmaking_matchmaking_proto_init() {
	if File_matchmaking_matchmaking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_matchmaking_matchmaking_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BattleRoomData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PveMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PveMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MatchCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MatchCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MatchWithRivalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MatchWitchRivalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MatchingCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MatchStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaking_matchmaking_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MatchStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_matchmaking_matchmaking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_matchmaking_matchmaking_proto_goTypes,
		DependencyIndexes: file_matchmaking_matchmaking_proto_depIdxs,
		MessageInfos:      file_matchmaking_matchmaking_proto_msgTypes,
	}.Build()
	File_matchmaking_matchmaking_proto = out.File
	file_matchmaking_matchmaking_proto_rawDesc = nil
	file_matchmaking_matchmaking_proto_goTypes = nil
	file_matchmaking_matchmaking_proto_depIdxs = nil
}
