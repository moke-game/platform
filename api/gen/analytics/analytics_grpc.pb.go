// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: analytics/analytics.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AnalyticsService_Analytics_FullMethodName = "/analytics.pb.AnalyticsService/Analytics"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AnalyticsService is the service that allows clients to send analytics events to the analytics service.
// 统计服务: 允许客户端将分析事件发送到分析服务的服务。
type AnalyticsServiceClient interface {
	// Analytics send a batch of analytics events to the analytics service，return Nothing
	// 发送一批分析事件到分析服务，返回Nothing
	Analytics(ctx context.Context, in *AnalyticsEvents, opts ...grpc.CallOption) (*Nothing, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) Analytics(ctx context.Context, in *AnalyticsEvents, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, AnalyticsService_Analytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations should embed UnimplementedAnalyticsServiceServer
// for forward compatibility
//
// AnalyticsService is the service that allows clients to send analytics events to the analytics service.
// 统计服务: 允许客户端将分析事件发送到分析服务的服务。
type AnalyticsServiceServer interface {
	// Analytics send a batch of analytics events to the analytics service，return Nothing
	// 发送一批分析事件到分析服务，返回Nothing
	Analytics(context.Context, *AnalyticsEvents) (*Nothing, error)
}

// UnimplementedAnalyticsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServiceServer struct {
}

func (UnimplementedAnalyticsServiceServer) Analytics(context.Context, *AnalyticsEvents) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analytics not implemented")
}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_Analytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsEvents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).Analytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_Analytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).Analytics(ctx, req.(*AnalyticsEvents))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.pb.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analytics",
			Handler:    _AnalyticsService_Analytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics/analytics.proto",
}
