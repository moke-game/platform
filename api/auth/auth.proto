syntax = "proto3";

// Auth service is used for token refresh, token validation, custom token packing, etc.
// 认证服务,用于token刷新，token验证，自定义封装token 等功能
package auth.v1;

option go_package = "auth/api/;v1";

service AuthService {
  // Authenticate request a jwt token by id
  // return a jwt token and a refresh token
  // 请求一个 jwt token,用于身份认证
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {}
  // RefreshToken request a new jwt token by refresh token
  // return a jwt token and a refresh token
  // 刷新jwt token 过期时间
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {}
  // ValidateToken validate a jwt token
  // return a uid and data
  // 验证jwt token是否合法
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {}
  // PacketToken pack some custom data to a jwt token, suitable for game room auth
  // 将一些自定义数据打包到jwt token中,适用于游戏房间验证
  rpc PackToken(PackTokenRequest) returns (PackTokenResponse) {}
  // ClearToken clear the uid's token
  // 清除uid对应的token
  rpc ClearToken(ClearTokenRequest) returns (ClearTokenResponse) {}
  // Delete delete the id and uid info from db
  // 删除id对应的uid信息
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  // AddBlocked add a uid to block list
  // if is_block is true, will block the uid for duration seconds
  // 添加到黑名单
  rpc AddBlocked(AddBlockedRequest) returns (AddBlockedResponse) {}
}

message AuthenticateRequest {
  string app_id = 1;
  // account id
  string id = 2;
}

message AuthenticateResponse {
  string access_token = 1;
  string refresh_token = 2;
  string uid = 3;
  // if is_override is true means already has an active token
  // it is suitable for different device login logic
  // 如果is_override为true表示已经有一个活跃的token
  // 适用于不同设备登录逻辑
  bool is_override = 4;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
}

message ValidateTokenRequest {
  string access_token = 1;
}

message ValidateTokenResponse {
  string uid = 1;
  // custom data from token
  bytes custom_data = 2;
}

message ClearTokenRequest {
  string uid = 1;
  string access_token = 2;
}

message ClearTokenResponse {}

message DeleteRequest {
  string app_id = 1;
  string id = 2;
}
message DeleteResponse {}


message AddBlockedRequest {
  string uid = 1;
  bool is_block = 2; // true: block, false: unblock
  int64 duration = 3; // block duration(Seconds) (if is_block is true)
}

message AddBlockedResponse {}


message PackTokenRequest {
  string uid = 1; // user id or room id etc.(optional)
  bytes custom_data = 2; // custom data will be packed to token (optional)
  int64 duration = 3; // token duration(minute),default: 60 minutes (optional)
}

message PackTokenResponse {
  string access_token = 1;
}
